name: Build Kernel - ChromeOS ARCVM
on:
  push:
    branches: ["main", "ci", "checkci"]
    paths:
      - ".github/workflows/build-kernel-arcvm.yml"
      - "kernel/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-kernel-arcvm.yml"
      - "kernel/**"
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    strategy:
      matrix:
        arch: [x86_64]
        include:
          - version: "5.10.178"
            cros_release: R116-15509.B

          - version: "5.10.184"
            cros_release: R117-15572.B

          - version: "5.10.188"
            cros_release: R119-15633.B

          - version: "5.10.194"
            cros_release: R122-15753.B

          - version: "5.10.209"
            cros_release: R123-15786.B

    name: Build ChromeOS ARCVM kernel
    runs-on: ubuntu-20.04
    env:
      LTO: thin
      ROOT_DIR: /
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Install Build Tools
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: bc bison build-essential git curl flex libelf-dev gzip ccache
          version: 1.0

      - name: Setup LLVM
        working-directory: /usr/bin
        run: |
          export LLVM_VERSION=18

          curl -L https://apt.llvm.org/llvm.sh | bash -s "${LLVM_VERSION}"

          for f in clang clang++ ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf; do
            ln -sf $f-$LLVM_VERSION $f
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup kernel source
        run: |
          git clone https://chromium.googlesource.com/chromiumos/third_party/kernel.git \
            -b release-${{ matrix.cros_release }}-chromeos-5.10-arcvm --depth=1

      - name: Setup KernelSU
        working-directory: kernel
        run: |
          echo "[+] KernelSU setup"
          KERNEL_ROOT=$GITHUB_WORKSPACE/kernel
          echo "[+] KERNEL_ROOT: $KERNEL_ROOT"
          echo "[+] Copy KernelSU driver to $KERNEL_ROOT/drivers"
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $KERNEL_ROOT/drivers/kernelsu

          echo "[+] Add KernelSU driver to Makefile"
          DRIVER_MAKEFILE=$KERNEL_ROOT/drivers/Makefile
          grep -q "kernelsu" $DRIVER_MAKEFILE || echo "obj-y += kernelsu/" >> $DRIVER_MAKEFILE

          echo "[+] Apply KernelSU patches"
          cd $KERNEL_ROOT && git apply $GITHUB_WORKSPACE/KernelSU/.github/patches/5.10/*.patch || echo "[-] No patch found"

          echo "[+] Patch script/setlocalversion"
          sed -i 's/-dirty//g' $KERNEL_ROOT/scripts/setlocalversion

          echo "[+] KernelSU setup done."
          cd $GITHUB_WORKSPACE/KernelSU
          VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "VERSION: $VERSION"
          echo "kernelsu_version=$VERSION" >> $GITHUB_ENV

      - name: Build Kernel
        working-directory: kernel
        run: |
          if [ ! -z ${{ vars.EXPECTED_SIZE }} ] && [ ! -z ${{ vars.EXPECTED_HASH }} ]; then
            export KSU_EXPECTED_SIZE=${{ vars.EXPECTED_SIZE }}
            export KSU_EXPECTED_HASH=${{ vars.EXPECTED_HASH }}
          fi

          make LLVM=1 LLVM_IAS=1 x86_64_arcvm_defconfig
          make LLVM=1 LLVM_IAS=1 -j$(nproc) bzImage

          echo "file_path=${PWD}/arch/x86/boot/bzImage" >> $GITHUB_ENV

      - name: Upload kernel-ARCVM-${{ matrix.arch }}-${{ matrix.version }}
        uses: actions/upload-artifact@v4
        with:
          name: kernel-ARCVM-${{ matrix.arch }}-${{ matrix.version }}
          path: "${{ env.file_path }}"

      - name: Bot session cache
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.ref_type == 'tag' }}
        id: bot_session_cache
        uses: actions/cache@v3
        with:
          path: scripts/ksubot.session
          key: ${{ runner.os }}-bot-session

      - name: Post to Telegram
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.ref_type == 'tag' }}
        env:
          CHAT_ID: ${{ secrets.CHAT_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          TITLE=kernel-ARCVM-${{ matrix.arch }}-${{ matrix.version }}
          echo "[+] title: $TITLE"
          export TITLE
          export VERSION="${{ env.kernelsu_version }}"
          echo "[+] Compress images"
          gzip -n -f -9 "${{ env.file_path }}"
          echo "[+] Image to upload"
          ls -l "${{ env.file_path }}.gz"
          if [ -n "${{ secrets.BOT_TOKEN }}" ]; then
            pip3 install telethon==1.31.1
            python3 "$GITHUB_WORKSPACE/KernelSU/scripts/ksubot.py" "${{ env.file_path }}.gz"
          fi
